// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model agencies {
    agency_id   String        @id
    agency_name String?
    collections collections[]

    @@fulltext([agency_name])
}

model collections {
    collection_id   String     @id
    collection_name String?
    agency_id       String?
    database_id     String?
    description     String?    @db.LongText
    agency          agencies?  @relation(fields: [agency_id], references: [agency_id], onDelete: NoAction, onUpdate: NoAction, map: "collection_agency_fkey")
    datasets        datasets[]

    @@index([agency_id])
    @@fulltext([collection_name, description])
}

model datasets {
    dataset_id       String       @id
    dataset_name     String?
    collection_id    String?
    // order of dataset in data dictionary
    dd_order         Int          @default(0)
    description      String?      @db.LongText
    reference_period String?
    collection       collections? @relation(fields: [collection_id], references: [collection_id], onDelete: NoAction, onUpdate: NoAction, map: "dataset_collection_fkey")
    variables        variables[]

    alternate table_matches[]  @relation("alt_table")
    matches   table_matches[]  @relation("match_table")
    regexes   datasets_regex[] @relation("datasets_regex")

    @@index([collection_id])
    @@fulltext([dataset_name, description])
}

model variables {
    variable_id   String
    variable_name String?
    dataset_id    String
    // order of variable in data dictionary
    dd_order      Int      @default(0)
    description   String?  @db.LongText
    information   String?  @db.LongText
    primary_key   Boolean?
    type          String?
    size          Int?
    refreshes     String?
    dataset       datasets @relation(fields: [dataset_id], references: [dataset_id], onDelete: NoAction, onUpdate: NoAction, map: "variable_dataset_fkey")

    alternate variable_matches[] @relation("alt_variable")
    matches   variable_matches[] @relation("match_variable")

    @@id([variable_id, dataset_id], name: "v_id")
    @@unique([dataset_id, variable_id])
    @@index([dataset_id])
    @@fulltext([variable_name, description])
}

model table_matches {
    table        datasets @relation("alt_table", fields: [table_id], references: [dataset_id])
    table_id     String
    match        datasets @relation("match_table", fields: [alt_table_id], references: [dataset_id])
    alt_table_id String
    notes        String?

    @@id([table_id, alt_table_id])
    @@index([table_id])
    @@index([alt_table_id])
}

model variable_matches {
    table_id        String
    variable        variables @relation("alt_variable", fields: [table_id, variable_id], references: [dataset_id, variable_id])
    variable_id     String
    match           variables @relation("match_variable", fields: [table_id, alt_variable_id], references: [dataset_id, variable_id])
    alt_variable_id String
    notes           String?

    @@id([table_id, variable_id, alt_variable_id])
    @@index([table_id, alt_variable_id])
    @@index([table_id, variable_id])
}

model datasets_regex {
    dataset_id String
    regex_id   String
    dataset    datasets @relation("datasets_regex", fields: [regex_id], references: [dataset_id])

    @@id([dataset_id, regex_id])
    @@index([regex_id])
}

model code_values {
    id          Int    @id @default(autoincrement())
    variable_id String
    code        String
    label       String @db.LongText
}

// this model is for writing weekly to prevent planetscale db
// from being put to sleep
model temp {
    id    Int    @id @default(autoincrement())
    value String
}

model db_info {
    id         Int      @id
    db_updated DateTime @updatedAt
    db_refresh String
}
